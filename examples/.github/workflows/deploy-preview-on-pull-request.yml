name: Create An ECS Deployment And Register It To App Mesh
on:
  pull_request:

jobs:
  vars:
    runs-on: ubuntu-18.04
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
      ref_short: ${{ steps.vars.outputs.ref_short }}
    steps:
      - uses: actions/checkout@v2
      - name: Set outputs
        id: vars
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=ref_short::$(echo ${{ github.ref }} | cut -d / -f 3- | sed -e 's/[^a-zA-Z0-9_]/_/g')"
  build:
    runs-on: ubuntu-18.04
    needs:
      - vars
    steps:
      - uses: actions/checkout@v2
      - run: |
          build_and_push_the_thing.sh

  configure-appmesh:
    name: Configure AppMesh
    concurrency: cd-${{ github.ref }}
    needs:
      - vars
      - build
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - uses: scribd/pr-preview-example@jimp/composite-action
      with:
        name: ${{github.event.pull_request.number}}
        servicediscovery-namespace-id: ns-ABC123
        servicediscovery-namespace-name: pr-preview.example.com
        mesh-name: pr-preview-mesh
        virtual-gateway-name: pr-preview-example-com
        virtual-node-spec: |
          {
            "listeners": [
              {
                "portMapping": {
                  "port": 8080,
                  "protocol": "http"
                },
                "healthCheck": {
                  "protocol": "tcp",
                  "port": 8080,
                  "healthyThreshold": 2,
                  "unhealthyThreshold": 2,
                  "timeoutMillis": 2000,
                  "intervalMillis": 5000
                }
              }
            ],
            "serviceDiscovery": {
              "awsCloudMap": {
                "namespaceName": "pr-preview-mesh.example.com",
                "serviceName": "hostname-example"
              }
            },
            "logging": {
              "accessLog": {
                "file": {
                  "path": "/dev/stdout"
                }
              }
            }
          }


  deploy-ecs:
    name: Deploy onto ECS
    runs-on: ubuntu-18.04
    needs:
      - vars
      - configure-appmesh
    steps:
      - name: customize-definition-files
        run: .github/pr-preview/customize-definition-files
        env:
          SHORTSHA: ${{ needs.vars.outputs.sha_short }}
          PRNUMBER: ${{ inputs.name }}
          SERVICEREGISTRYARN: ${{ steps.servicediscovery-service.outputs.arn }}

      - name: definition-files
        run:
          cat .github/pr-preview/*.json

      - name: Register Task Definition
        id: task-definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: .github/pr-preview/task-definition.json

      - name: Deploy Service
        uses: scribd/amazon-ecs-service-action@v1
        with:
          spec-file: .github/pr-preview/service-definition.json
          spec: |
            {
              "taskDefinition": "${{ steps.task-definition.outputs.task-definition-arn }}"
            }

